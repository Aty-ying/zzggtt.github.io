<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzggtt.github.io</id>
    <title>ZG0T01</title>
    <updated>2020-10-24T08:50:07.071Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzggtt.github.io"/>
    <link rel="self" href="https://zzggtt.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zzggtt.github.io/images/avatar.png</logo>
    <icon>https://zzggtt.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZG0T01</rights>
    <entry>
        <title type="html"><![CDATA[《图解TCP/IP》读书笔记]]></title>
        <id>https://zzggtt.github.io/post/lesslesstu-jie-tcpipgreatergreater-du-shu-bi-ji/</id>
        <link href="https://zzggtt.github.io/post/lesslesstu-jie-tcpipgreatergreater-du-shu-bi-ji/">
        </link>
        <updated>2020-10-08T08:56:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>了解TCP/IP是对渗透测试很有必要的，下面是我阅读完《图解TCP/IP》后，记录的一些重要的知识点。</p>
<p>（随着我的渗透测试学习，将会持续更新！！！）</p>
<h3 id="tcpip概述">TCP/IP概述</h3>
<h4 id="1-含义">1、含义</h4>
<p>互联网在进行通信时，需要相应的网络协议，而在网络中被广泛使用的TCP/IP协议。TCP/IP协议在多数情况下指的是：利用IP进行通信时所必须用到的协议群的统称。</p>
<figure data-type="image" tabindex="1"><img src="https://zzggtt.github.io/post-images/1603526064488.png" alt="" loading="lazy"></figure>
<h4 id="2-分层模型">2、分层模型</h4>
<figure data-type="image" tabindex="2"><img src="https://zzggtt.github.io/post-images/1603526073786.png" alt="" loading="lazy"></figure>
<p>OSI参考模型注重“通信协议必要的功能是什么”，而TCP/IP则更强调“在计算机上实现协议应该开放哪种程序”</p>
<ul>
<li>
<p><strong>硬件层</strong></p>
<p>TCP/IP的最底层的主要作用是负责数据传递的硬件。</p>
</li>
<li>
<p><strong>网卡层</strong></p>
<p>网卡层也称网络接口层，可以理解为“驱动程序”。它是硬件与操作系统之间的桥梁。计算机的外设不是直接插上就能使用的，还需要“驱动程序”的支持。所以通常需要在操作系统上安装一些<code>驱动程序软件</code>，才能使用这些附加硬件。</p>
</li>
<li>
<p><strong>互联网层</strong></p>
<p>互联网层使用IP协议，IP协基于IP地址转发分发数据。</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://zzggtt.github.io/post-images/1603526079889.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p><strong>传输层</strong></p>
<p>传输层的主要功能是让应用程序软件之间实现通信，它具有来个代表性的协议：TCP、UDP。</p>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://zzggtt.github.io/post-images/1603526084292.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p><strong>应用层</strong></p>
<p>TCP/IP的应用层把OSI参考模型中的会话层、表示层、应用层的功能都集中到<code>应用程序软件</code>中来实现。TCP/IP应用的架构绝大数属于<code>C/S架构</code>。</p>
<p>提供服务的应用程序叫做服务端，接收服务的应用程序叫做客户端。在这种通信模式中，提供服务的程序会被预先部署到<code>服务器主机</code>上，等待接收任何时刻客户端发送的请求。</p>
</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://zzggtt.github.io/post-images/1603526090062.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>WWW</p>
<p>在WWW中，用户通过Web浏览器（客户端），就可以访问存储在Web服务器上的各种信息。Web浏览器和Web服务器之间的通信协议是<code>HTTP</code>（应用层协议），所传输的数据的主要格式是<code>HTML</code>（表示层协议）。</p>
</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://zzggtt.github.io/post-images/1603526103650.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>电子邮件</p>
<p>电子邮件之在网络上发送邮件，发送邮件的通信协议是<code>SMPT</code>（应用层协议）。起初只能发送文本格式，然而现在电子邮件由MIME协议（表示层协议）拓展后，就可以发送声音、图片等各式各样的信息。</p>
</li>
</ul>
<figure data-type="image" tabindex="7"><img src="https://zzggtt.github.io/post-images/1603526113007.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>文件传输</p>
<p>文件传输协议是指将保存在其他计算机硬盘上的文件传输到本地硬盘上，该过程使用的协议是<code>FTP</code>。</p>
</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://zzggtt.github.io/post-images/1603526118579.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>远程登陆</p>
<p>远程登陆指的是登录到远程的计算机上。在TCP/IP中常用<code>TELNET</code>和<code>SSH</code>两种协议。</p>
</li>
</ul>
<figure data-type="image" tabindex="9"><img src="https://zzggtt.github.io/post-images/1603526123676.png" alt="" loading="lazy"></figure>
<h4 id="3-通信示例">3、通信示例</h4>
<figure data-type="image" tabindex="10"><img src="https://zzggtt.github.io/post-images/1603526128849.png" alt="" loading="lazy"></figure>
<h3 id="地址的唯一性">地址的唯一性</h3>
<h4 id="基础概念">基础概念</h4>
<ul>
<li>
<p>IP地址</p>
<p>用于识别TCP/IP网络中互联的主机和路由器。</p>
</li>
<li>
<p>MAC地址</p>
<p>用于是被同一链路中不同的计算机。</p>
</li>
<li>
<p>端口</p>
<p>用于识别一台计算机中正在运行的不同的应用程序。</p>
</li>
</ul>
<h3 id="通信识别">通信识别</h3>
<p>在TCP/IP或UDP/IP通信中，通常采用5个信息来识别一个通信：源IP地址、目标IP地址、协议号、源端口号、目标端口号：</p>
<figure data-type="image" tabindex="11"><img src="https://zzggtt.github.io/post-images/1603526138493.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[复习一下Web基础知识]]></title>
        <id>https://zzggtt.github.io/post/fu-xian-yi-xia-web-ji-chu-zhi-shi/</id>
        <link href="https://zzggtt.github.io/post/fu-xian-yi-xia-web-ji-chu-zhi-shi/">
        </link>
        <updated>2020-09-25T02:28:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>在《图解TCP/IP》中，了解到WWW是促使互联网发展的重要动力，所以准备复习一下JavaWeb相关的基础知识。</p>
<figure data-type="image" tabindex="1"><img src="https://zzggtt.github.io/post-images/1601000921816.png" alt="" loading="lazy"></figure>
<h3 id="通信协议http">通信协议HTTP</h3>
<p>Web客户端（浏览器）和web服务器之间主要是通过<code>http协议</code>来进行交互。想要快速掌握HTTP协议，推荐通过《图解HTTP》进行学习。掌握基础的<code>请求和响应流</code>。</p>
<figure data-type="image" tabindex="2"><img src="https://zzggtt.github.io/post-images/1601000926412.png" alt="" loading="lazy"></figure>
<h3 id="web"><strong>Web</strong></h3>
<h4 id="1-静态web">1、静态Web</h4>
<p>静态Web对于每个用户来说，看到的都是相同的页面。例如：<a href="https://www.baidu.com/index.html">百度首页</a>，对于每个用户来说都是一样的。</p>
<p>常见的静态Web资源有：html、css、js、image等。</p>
<figure data-type="image" tabindex="3"><img src="https://zzggtt.github.io/post-images/1601000933285.png" alt="" loading="lazy"></figure>
<h4 id="2-动态web">2、动态Web</h4>
<p>动态Web对于每个用户来说就因人而异。例如：<a href="http://i.baidu.com/">百度的个人中心</a>，就会从数据库中去加载不同用户的不同个人资料等数据。</p>
<figure data-type="image" tabindex="4"><img src="https://zzggtt.github.io/post-images/1601000937725.png" alt="" loading="lazy"></figure>
<h3 id="web服务器">Web服务器</h3>
<p>​	<code>Web服务器</code>处理来自客户端的HTTP请求，并返回HTTP响应。它<code>擅长</code>处理静态资源。而静态资源存储在Web<code>目录</code>中，Web服务器找到相应的静态资源后，响应给客户端。</p>
<p>​	但如果想要提供动态页面和动态数据，例如，需要从数据库中取出个人中心的数据，Web服务器就显得有些力不从心了。这时就需要一个辅助应用，能够生成动态页面，而且这个应用能与Web服务器通信，并且能够和后端java语言进行交互，从而从数据库存取数据。这个辅助应用就是<code>servlet</code>。</p>
<h3 id="servlet">Servlet</h3>
<p>​	Servlet就是sun公司开发动态web的一门技术，Sun公司在这些API中提供一个接口叫做Servlet。我们一般把实现了Servlet接口的java类也称之为Servlet。在MVC设计模式中，servlet扮演着C（控制器）的角色，当客户请求到来，进入到Servlet，Servlet调用M（业务逻辑）从数据库中存取数据<br>
  但Servlet也需要帮助。当请求到来时，必须有人加载、初始化和实例化Servlet，或者创建或分配一个新的线程处理这个请求，调用Servlet的doGet（）、doPost（）方法。并需要有人创建servlet必须的参数HTTPServletRequest和HTTPServletResponse。当请求处理结束后，有人销毁Servlet，管理着Servlet的生命周期。这个人就是<code>Web容器</code>也称<code>Web应用服务器</code>。</p>
<h3 id="web容器">Web容器</h3>
<p>​	Servlet没有main()方法，它们受控于另一个Java应用，这个Java应用称为容器。<br>
<code>Tomcat</code>就是这样一个容器，如果Web服务器（如Apache）得到一个指向某Servlet的请求（而不是其他请求，如请求一个普通的静态页面），此时Web服务器不是把这个请求交给servlet本身，而是交给部署该Servlet的容器，要由容器向Servlet提供HTTP请求和响应，而且要由容器调用Servlet的方法，如doGet()和doPost()。</p>
<p>用一个丑陋的图来形容就是：<br>
<img src="https://zzggtt.github.io/post-images/1601000945479.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://zzggtt.github.io/post/about/</id>
        <link href="https://zzggtt.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>📝温故而知新</p>
</blockquote>
<h2 id="twitterhttpstwittercomzer0ney1">📒 twitter：https://twitter.com/Zer0ney1</h2>
<h2 id="wechatz807852704">📙 wechat：z807852704</h2>
]]></content>
    </entry>
</feed>