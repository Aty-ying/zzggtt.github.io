<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzggtt.github.io</id>
    <title>ZG0T01</title>
    <updated>2020-10-08T08:58:45.998Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzggtt.github.io"/>
    <link rel="self" href="https://zzggtt.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zzggtt.github.io/images/avatar.png</logo>
    <icon>https://zzggtt.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZG0T01</rights>
    <entry>
        <title type="html"><![CDATA[《图解TCP/IP》读书笔记]]></title>
        <id>https://zzggtt.github.io/post/lesslesstu-jie-tcpipgreatergreater-du-shu-bi-ji/</id>
        <link href="https://zzggtt.github.io/post/lesslesstu-jie-tcpipgreatergreater-du-shu-bi-ji/">
        </link>
        <updated>2020-10-08T08:56:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="内外网">内外网</h2>
<p>一个互联网的现状：在IPV6并未得到普及，而IPV4地址又即将耗尽的情况。通过私有IP技术 +  NAT技术来解决上述问题。现在很多公司、学校内部采用在每个终端设置<strong>私有IP</strong>，而在路由器或必要的服务器上设置<strong>全局IP</strong>。而配置私有IP的终端则通过<strong>NAT</strong>与外部进行通信。</p>
<p><strong>私有IP</strong>地址范围：</p>
<p><img src="https://zzggtt.github.io/post-images/1602147475706.png" alt="" loading="lazy"><img src="C:%5CUsers%5C80785%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200914155059239.png" alt="image-20200914155059239" loading="lazy"></p>
<p>除此之外都是<strong>全局IP</strong>。</p>
<p><strong>NAT</strong>（Network Address Translator）是用于在本地网络中使用私有IP，而在连接互联网时转而使用全局IP的技术。</p>
<p>工作机制如下：</p>
<figure data-type="image" tabindex="1"><img src="https://zzggtt.github.io/post-images/1602147479591.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[复习一下Web基础知识]]></title>
        <id>https://zzggtt.github.io/post/fu-xian-yi-xia-web-ji-chu-zhi-shi/</id>
        <link href="https://zzggtt.github.io/post/fu-xian-yi-xia-web-ji-chu-zhi-shi/">
        </link>
        <updated>2020-09-25T02:28:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>在《图解TCP/IP》中，了解到WWW是促使互联网发展的重要动力，所以准备复习一下JavaWeb相关的基础知识。</p>
<figure data-type="image" tabindex="1"><img src="https://zzggtt.github.io/post-images/1601000921816.png" alt="" loading="lazy"></figure>
<h3 id="通信协议http">通信协议HTTP</h3>
<p>Web客户端（浏览器）和web服务器之间主要是通过<code>http协议</code>来进行交互。想要快速掌握HTTP协议，推荐通过《图解HTTP》进行学习。掌握基础的<code>请求和响应流</code>。</p>
<figure data-type="image" tabindex="2"><img src="https://zzggtt.github.io/post-images/1601000926412.png" alt="" loading="lazy"></figure>
<h3 id="web"><strong>Web</strong></h3>
<h4 id="1-静态web">1、静态Web</h4>
<p>静态Web对于每个用户来说，看到的都是相同的页面。例如：<a href="https://www.baidu.com/index.html">百度首页</a>，对于每个用户来说都是一样的。</p>
<p>常见的静态Web资源有：html、css、js、image等。</p>
<figure data-type="image" tabindex="3"><img src="https://zzggtt.github.io/post-images/1601000933285.png" alt="" loading="lazy"></figure>
<h4 id="2-动态web">2、动态Web</h4>
<p>动态Web对于每个用户来说就因人而异。例如：<a href="http://i.baidu.com/">百度的个人中心</a>，就会从数据库中去加载不同用户的不同个人资料等数据。</p>
<figure data-type="image" tabindex="4"><img src="https://zzggtt.github.io/post-images/1601000937725.png" alt="" loading="lazy"></figure>
<h3 id="web服务器">Web服务器</h3>
<p>​	<code>Web服务器</code>处理来自客户端的HTTP请求，并返回HTTP响应。它<code>擅长</code>处理静态资源。而静态资源存储在Web<code>目录</code>中，Web服务器找到相应的静态资源后，响应给客户端。</p>
<p>​	但如果想要提供动态页面和动态数据，例如，需要从数据库中取出个人中心的数据，Web服务器就显得有些力不从心了。这时就需要一个辅助应用，能够生成动态页面，而且这个应用能与Web服务器通信，并且能够和后端java语言进行交互，从而从数据库存取数据。这个辅助应用就是<code>servlet</code>。</p>
<h3 id="servlet">Servlet</h3>
<p>​	Servlet就是sun公司开发动态web的一门技术，Sun公司在这些API中提供一个接口叫做Servlet。我们一般把实现了Servlet接口的java类也称之为Servlet。在MVC设计模式中，servlet扮演着C（控制器）的角色，当客户请求到来，进入到Servlet，Servlet调用M（业务逻辑）从数据库中存取数据<br>
  但Servlet也需要帮助。当请求到来时，必须有人加载、初始化和实例化Servlet，或者创建或分配一个新的线程处理这个请求，调用Servlet的doGet（）、doPost（）方法。并需要有人创建servlet必须的参数HTTPServletRequest和HTTPServletResponse。当请求处理结束后，有人销毁Servlet，管理着Servlet的生命周期。这个人就是<code>Web容器</code>也称<code>Web应用服务器</code>。</p>
<h3 id="web容器">Web容器</h3>
<p>​	Servlet没有main()方法，它们受控于另一个Java应用，这个Java应用称为容器。<br>
<code>Tomcat</code>就是这样一个容器，如果Web服务器（如Apache）得到一个指向某Servlet的请求（而不是其他请求，如请求一个普通的静态页面），此时Web服务器不是把这个请求交给servlet本身，而是交给部署该Servlet的容器，要由容器向Servlet提供HTTP请求和响应，而且要由容器调用Servlet的方法，如doGet()和doPost()。</p>
<p>用一个丑陋的图来形容就是：<br>
<img src="https://zzggtt.github.io/post-images/1601000945479.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>